name: CI

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: estate_match_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -proot"
          --health-interval=10s
          --health-timeout=10s
          --health-retries=10
          --health-start-period=30s

    env:
      RAILS_ENV: test
      DATABASE_URL: mysql2://root:root@127.0.0.1:3306/estate_match_test
      MYSQL_HOST: 127.0.0.1
      MYSQL_PORT: 3306
      MYSQL_USER: root
      MYSQL_PASSWORD: root
      MYSQL_DATABASE: estate_match_test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.2
          bundler-cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Wait for MySQL service health check
        run: |
          echo "Waiting for MySQL service to be healthy..."
          timeout 300 bash -c 'until docker ps --filter health=healthy --filter ancestor=mysql:8.0 | grep -q mysql; do echo "Waiting for MySQL health check..."; sleep 5; done' || echo "MySQL health check timeout"

      - name: Wait for MySQL
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {60..0}; do
            if mysqladmin ping -h"127.0.0.1" -uroot -proot --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "MySQL is unavailable - sleeping (remaining attempts: $i)"
            sleep 3
          done
          
          if [ "$i" = 0 ]; then
            echo 'MySQL is still unavailable after 3 minutes - exiting'
            echo 'Checking MySQL service status:'
            docker ps -a
            echo 'Checking MySQL logs:'
            docker logs $(docker ps -aq --filter ancestor=mysql:8.0) || echo 'No MySQL container found'
            exit 1
          fi
          
          echo 'MySQL is ready - proceeding with setup'

      - name: Setup database
        run: |
          echo "Setting up database with the following configuration:"
          echo "Host: $MYSQL_HOST"
          echo "Port: $MYSQL_PORT" 
          echo "User: $MYSQL_USER"
          echo "Database: $MYSQL_DATABASE"
          
          echo "Testing MySQL connection..."
          mysql -h"$MYSQL_HOST" -P"$MYSQL_PORT" -u"$MYSQL_USER" -p"$MYSQL_PASSWORD" -e "SELECT 1;"
          
          echo "Creating and migrating database..."
          bundle exec rails db:create
          bundle exec rails db:migrate

      - name: Precompile assets
        run: bundle exec rails assets:precompile

      - name: Run RSpec tests
        run: bundle exec rspec

      # - name: Run RuboCop (linting)
      #   run: bundle exec rubocop --parallel
      #   continue-on-error: true

      # - name: Run Brakeman (security)
      #   run: bundle exec brakeman --no-pager
      #   continue-on-error: true